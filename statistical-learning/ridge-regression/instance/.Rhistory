Y <- scale( Boston$medv, center=TRUE, scale=FALSE)
X <- scale( as.matrix(Boston[,-c(14)]), center=TRUE, scale=TRUE)
p <- dim(X)[2]
n <- dim(X)[1]
df<-data.frame(X,Y)
optim.lambda <- matrix(0,ncol=4,nrow=3)
colnames(optim.lambda) <- c("method","lambda","pmse","df")
optim.lambda <- data.frame(optim.lambda)
lambda.max <- 1e5
n.lambdas <- 50
lambda.v <- exp(seq(0,log(lambda.max+1),length=n.lambdas))-1
#k - fold 10 cross-validation
results.cv10 <- ridgereg.cv(x=X,y=Y,k=10,lambda=lambda.v,plot=TRUE)
##################################
##R FUNCTIONS FOR THE ASSIGNMENT##
##################################
#Code with the definition of the functions used throughout the document
#this piece of code won't be shown in the pdf document
plot.lam <- function(results,lambda,df) {
#function that plots the mspe agains both lambda and df(lambda)
par(mfrow=c(1,2),oma = c(2,3,1,0), mar = c(4,2,2,1), mgp=c(1.5,0.5,0))
plot(log(1+results[,1]),results[,2],
xlab="log(1+lambda)",
ylab = "",
main="MSPE by lambda values",
cex.main=0.9, cex.axis=0.8)
lam.opt <- results[results[,2]==min(results[,2]),1]
abline(v=log(1+lam.opt),col=2,lty=2)
plot(df,results[,2],
xlab="df(lambda)",
ylab = "",
main="MSPE by df(lambda)",
cex.main=0.9,cex.axis=0.8)
lam.opt <- df[results[,2]==min(results[,2])]
abline(v=lam.opt,col=2,lty=2)
mtext(text="MSPE",side=2,line=0,outer=TRUE)
}
cal.edf <- function(x,lambda) {
#function that computes the efective degrees of freedom for a
#given vecotor of lambdas and a data set x
n.lam <- length(lambda)
d2 <- eigen(t(x)%*%x ,symmetric = TRUE, only.values = TRUE)$values
p <- dim(x)[2]
n <- dim(x)[1]
df.v <- NULL
for (i in 1:n.lam){
lambda.v <- lambda[i]
df.v[i] <- sum(d2/(d2+lambda.v))
}
return(df.v)
}
beta_hat <- function(x,y,lambda) {
#function that computes for a given data and lambda the value
#of the vecotr of regressors and the matrices H and Hlam
p <- dim(x)[2]
H.lam <- solve(t(x)%*%x + lambda*diag(1,p))%*%t(x)
beta.hat <- H.lam%*%y
Hhat <- x%*%H.lam
values <- list(H=H.lam,beta=beta.hat,Hlam=Hhat)
}
fit.ridge <- function(x,y,xval,yval,lambda) {
#function that computes for a given data and lambda
#the model that best fits the data and returns the
#mpse and the vector of betas
p <- dim(x)[2]
reg <- beta_hat(x,y,lambda)
y.hat <- xval%*%reg$beta
mspe <- (1/length(yval))*t((yval-y.hat))%*%(yval-y.hat)
values <- list(beta=reg$beta,mspe=mspe)
return(values)
}
loo.g.cv <- function(x,y,lambda,type="loocv") {
#function that computes for a given data set and vector
#of lambdas the value of the E(mspe) computed by gcv o loocv
n.lambdas <- length(lambda)
df.v <- cal.edf(x,lambda=lambda)
n <- dim(x)[1]
results <- matrix(0,nrow = n.lambdas, ncol = 2)
for (l in 1:n.lambdas){
reg <- beta_hat(x,y,lambda[l])
hat.Y <- x%*%reg$beta
nu <- sum(diag(reg$Hlam))
if (type=="gcv") {a<-nu/n} else {a<-diag(reg$Hlam)}
results[l,] <- c(lambda.v[l],sum(((y-hat.Y)/(1-a))^2 )/n)
}
plot.lam(results=results,lambda=lambda.v,df=df.v)
opt <- c(results[which.min(results[,2]),],df.v[which.min(results[,2])])
return(opt)
}
ridgereg <- function(x,y,xval,yval,lambda,plot=TRUE) {
p <- dim(x)[2] #number of parameters
n <- dim(x)[1] #number of observations
#empty results matrix
results <- matrix(0,nrow = length(lambda), ncol = 2)
colnames(results) <- c("lambda","pmse")
for (i in 1:length(lambda)) {
mspe <- fit.ridge(x,y,xval,yval,lambda=lambda[i])$mspe
results[i,] <- c(lambda[i],mspe)
}
df <- cal.edf(x=x,lambda=lambda)
results <- cbind(results,df)
if(plot == TRUE){
plot.lam(results=results,lambda=lambda,df=df)
}
return(results)
}
ridgereg.cv <- function(x,y,k,lambda,plot=TRUE) {
p <- dim(x)[2]
n <- dim(x)[1]
flds <- createFolds(y, k = k, list = TRUE, returnTrain = FALSE)
kresults <- matrix(0,nrow =length(lambda) , ncol = k)
results <- matrix(0,nrow = length(lambda), ncol = 2)
colnames(results) <- c("lambda","pmse")
for (j in 1:length(flds)) {
filt <- unlist(flds[j], use.names=FALSE)
mpse <- ridgereg(x=x[-filt,],y=y[-filt,],
xval=x[filt,],yval=y[filt,],
lambda = lambda,
plot = FALSE)
kresults[,j] <- mpse[,2]
}
results[,1] <- lambda
results[,2] <- rowMeans(kresults)
df <- cal.edf(x=x,lambda=lambda)
results <- cbind(results,df)
if (plot==TRUE) {
plot.lam(results=results,lambda=lambda,df=df)
}
value <- results[which.min(results[,2]),]
return(value)
}
data(Boston)
Y <- scale( Boston$medv, center=TRUE, scale=FALSE)
X <- scale( as.matrix(Boston[,-c(14)]), center=TRUE, scale=TRUE)
p <- dim(X)[2]
n <- dim(X)[1]
df<-data.frame(X,Y)
optim.lambda <- matrix(0,ncol=4,nrow=3)
colnames(optim.lambda) <- c("method","lambda","pmse","df")
optim.lambda <- data.frame(optim.lambda)
lambda.max <- 1e5
n.lambdas <- 50
lambda.v <- exp(seq(0,log(lambda.max+1),length=n.lambdas))-1
#k - fold 10 cross-validation
results.cv10 <- ridgereg.cv(x=X,y=Y,k=10,lambda=lambda.v,plot=TRUE)
optim.lambda[2,] <- c("10 fold cv",round(results.cv10,4))
optim.lambda
model <- fit.ridge(x=X,y=Y,xval=X,yval=Y,lambda=as.numeric(optim.lambda[1,2]))
model$beta
model <- fit.ridge(x=X,y=Y,xval=X,yval=Y,lambda=4.1795)
model$beta
knitr::opts_chunk$set(echo = TRUE)
load("boston.Rdata")
boston <- boston.c
remove(boston.c, boston.soi, boston.utm)
#Non scaled data
Y <- boston$CMEDV
X <- apply(as.matrix(boston[,8:20]),2,as.numeric)
#Scaled data
Y.scale <- scale(Y,center=TRUE,scale = FALSE)
X.scale <- scale(X,center=TRUE,scale = TRUE)
model <- fit.ridge(x=X.scale,y=Y.scale,xval=X.scale,yval=Y.scale,lambda=4.1795)
model$beta
solve(t(X.scale)%*%X.scale+4*diag(1,13))%*%t(X.scale)%*%Y.scale
solve(t(X.scale)%*%X.scale+0*diag(1,13))%*%t(X.scale)%*%Y.scale
solve(t(X.scale)%*%X.scale+1*diag(1,13))%*%t(X.scale)%*%Y.scale
library(glmnet)
solve(t(X.scale)%*%X.scale+1*diag(1,13))%*%t(X.scale)%*%Y.scale
library(glmnet)
solve(t(X.scale)%*%X.scale+1*diag(1,13))%*%t(X.scale)%*%Y.scale
Y.scale
#Non scaled data
Y <- boston$CMEDV
X <- apply(as.matrix(boston[,8:20]),2,as.numeric)
#Scaled data
Y.scale <- scale(Y,center=TRUE,scale = FALSE)
X.scale <- scale(X,center=TRUE,scale = TRUE)
Y.scale
solve(t(X.scale)%*%X.scale+1*diag(1,13))%*%t(X.scale)%*%Y.scale
library(glmnet)
dim(Y.scale)
n <- dim(Y.scale)[1]
sd_y <- sqrt(var(Y.scale)*(n-1)/n)[1,1]
sd_y
dim(X.scale)
p <- dim(X.scale)[2]
sd_y <- sqrt(var(Y.scale)*(n-1)/n)[1,1]
beta1 <- solve(t(X.scale)%*%X.scale+10*diag(p),t(X.scale)%*%(Y.scale))[,1]
fit_glmnet <- glmnet(X.scale,Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20)
beta2 <- as.vector(coef(fit_glmnet, s = sd_y*10/n, exact = TRUE))[-1]
cbind(beta1[1:10], beta2[1:10])
fit_glmnet <- glmnet(X.scale,Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20)
beta2 <- as.vector(coef(fit_glmnet, s = sd_y*10/n, exact = TRUE))[-1]
beta2 <- as.vector(coef(fit_glmnet, s = sd_y*10/n))
cbind(beta1[1:10], beta2[1:10])
n <- dim(Y.scale)[1]
p <- dim(X.scale)[2]
sd_y <- sqrt(var(Y.scale)*(n-1)/n)[1,1]
beta1 <- solve(t(X.scale)%*%X.scale+10*diag(p),t(X.scale)%*%(Y.scale))[,1]
fit_glmnet <- glmnet(X.scale,Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20)
beta2 <- as.vector(coef(fit_glmnet, s = sd_y*10/n))
cbind(beta1[1:10], beta2[1:10])
set.seed(123)
n    <- 1000
p   <-  100
X   <- matrix(rnorm(n*p,0,1),n,p)
beta <- rnorm(p,0,1)
Y    <- X%*%beta+rnorm(n,0,0.5)
sd_y <- sqrt(var(Y)*(n-1)/n)[1,1]
beta1 <- solve(t(X)%*%X+10*diag(p),t(X)%*%(Y))[,1]
fit_glmnet <- glmnet(X,Y, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20)
beta2 <- as.vector(coef(fit_glmnet, s = sd_y*10/n))[-1]
cbind(beta1[1:10], beta2[1:10])
set.seed(123)
n    <- 1000
p   <-  100
X   <- matrix(rnorm(n*p,0,1),n,p)
beta <- rnorm(p,0,1)
Y    <- X%*%beta+rnorm(n,0,0.5)
sd_y <- sqrt(var(Y)*(n-1)/n)[1,1]
beta1 <- solve(t(X)%*%X+10*diag(p),t(X)%*%(Y))[,1]
fit_glmnet <- glmnet(X,Y, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20)
beta2 <- as.vector(coef(fit_glmnet, s = sd_y*10/n, exact = TRUE))[-1]
cbind(beta1[1:10], beta2[1:10])
solve(t(X.scale)%*%X.scale+1*diag(1,13))%*%t(X.scale)%*%Y.scale
solve(t(X.scale)%*%X.scale+10*diag(1,13))%*%t(X.scale)%*%Y.scale
fit_glmnet <- glmnet(X.scale,Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20)
beta2 <- as.vector(coef(fit_glmnet, s = sd_y*10/n))
beta2
beta2 <- as.vector(coef(fit_glmnet))
beta2
beta2 <- as.vector(coef(fit_glmnet))
beta2
fit_glmnet <- glmnet(X.scale,Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20)
coef(fit_glmnet)
beta1 <-solve(t(X.scale)%*%X.scale+1*diag(1,13))%*%t(X.scale)%*%Y.scale
library(glmnet)
n <- dim(Y.scale)[1]
p <- dim(X.scale)[2]
sd_y <- sqrt(var(Y.scale)*(n-1)/n)[1,1]
beta1 <- solve(t(X.scale)%*%X.scale+10*diag(p),t(X.scale)%*%(Y.scale))[,1]
fit_glmnet <- glmnet(X.scale,Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20)
beta2 <- as.vector(coef(fit_glmnet, s = sd_y*10/n))
cbind(beta1[1:10], beta2[1:10])
beta1 <-solve(t(X.scale)%*%X.scale+10*diag(1,13))%*%t(X.scale)%*%Y.scale
library(glmnet)
n <- dim(Y.scale)[1]
p <- dim(X.scale)[2]
sd_y <- sqrt(var(Y.scale)*(n-1)/n)[1,1]
beta1 <- solve(t(X.scale)%*%X.scale+10*diag(p),t(X.scale)%*%(Y.scale))[,1]
fit_glmnet <- glmnet(X.scale,Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20)
beta2 <- as.vector(coef(fit_glmnet, s = sd_y*10/n))
cbind(beta1[1:10], beta2[1:10])
beta1 <-solve(t(X.scale)%*%X.scale+10*diag(1,13))%*%t(X.scale)%*%Y.scale
library(glmnet)
n <- dim(Y.scale)[1]
p <- dim(X.scale)[2]
sd_y <- sqrt(var(Y.scale)*(n-1)/n)[1,1]
beta1 <- solve(t(X.scale)%*%X.scale+10*diag(p),t(X.scale)%*%(Y.scale))[,1]
fit_glmnet <- glmnet(X.scale,Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20)
beta2 <- as.vector(coef(fit_glmnet, s = 10/n))
cbind(beta1[1:10], beta2[1:10])
beta2 <- as.vector(coef(fit_glmnet, s = 10))
beta2 <- as.vector(coef(fit_glmnet, s = 10/n))
beta2*sd_y
beta1 <-solve(t(X.scale)%*%X.scale+10*diag(1,13))%*%t(X.scale)%*%Y.scale
library(glmnet)
n <- dim(Y.scale)[1]
p <- dim(X.scale)[2]
sd_y <- sqrt(var(Y.scale)*(n-1)/n)[1,1]
beta1 <- solve(t(X.scale)%*%X.scale+10*diag(p),t(X.scale)%*%(Y.scale))[,1]
fit_glmnet <- glmnet(X.scale,Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20)
beta2 <- as.vector(coef(fit_glmnet, s = 10/n))
beta2*sd_y
cbind(beta1[1:10], beta2[1:10])
beta1 <-solve(t(X.scale)%*%X.scale+10*diag(1,13))%*%t(X.scale)%*%Y.scale
library(glmnet)
n <- dim(Y.scale)[1]
p <- dim(X.scale)[2]
sd_y <- sqrt(var(Y.scale)*(n-1)/n)[1,1]
beta1 <- solve(t(X.scale)%*%X.scale+10*diag(p),t(X.scale)%*%(Y.scale))[,1]
fit_glmnet <- glmnet(X.scale,Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20)
beta2 <- as.vector(coef(fit_glmnet, s = sd_y*10/n))
cbind(beta1[1:10], beta2[1:10])
fit_glmnet <- glmnet(X.scale,Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20, lambda = 10)
beta2 <- as.vector(coef(fit_glmnet, s = sd_y*10/n))
cbind(beta1[1:10], beta2[1:10])
beta1 <-solve(t(X.scale)%*%X.scale+10*diag(1,13))%*%t(X.scale)%*%Y.scale
library(glmnet)
n <- dim(Y.scale)[1]
p <- dim(X.scale)[2]
sd_y <- sqrt(var(Y.scale)*(n-1)/n)[1,1]
beta1 <- solve(t(X.scale)%*%X.scale+10*diag(p),t(X.scale)%*%(Y.scale))[,1]
fit_glmnet <- glmnet(X.scale,Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20, lambda = 10)
beta2 <- as.vector(coef(fit_glmnet, s = sd_y*10/n))
cbind(beta1[1:10], beta2[1:10])
beta2 <- as.vector(coef(fit_glmnet, s = 10/n))
beta2
beta1 <-solve(t(X.scale)%*%X.scale+10*diag(1,13))%*%t(X.scale)%*%Y.scale
beta1
fit_glmnet <- glmnet(X.scale, Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20, lambda = 10/n)
fit_glmnet
10/n
?glmnet
fit_glmnet <- glmnet(X.scale, Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20, lambda = 10)
fit_glmnet
fit_glmnet <- glmnet(X.scale, Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20, lambda = 10)
beta2 <- as.vector(coef(fit_glmnet, s = 10))
cbind(beta1[1:10], beta2[1:10])
?coef
beta2 <- as.vector(coef(fit_glmnet))
beta2
fit_glmnet <- glmnet(X.scale, Y.scale, alpha=0, standardize = F, intercept = FAzLSE, thresh = 1e-20, lambda = 10)
beta2 <- as.vector(coef(fit_glmnet))
fit_glmnet <- glmnet(X.scale, Y.scale, alpha=0, standardize = F, intercept = FAzLSE, thresh = 1e-20, lambda = 10)
beta2 <- as.vector(coef(fit_glmnet))
fit_glmnet <- glmnet(X.scale, Y.scale, alpha=0, standardize = F, intercept = FAzLSE, thresh = 1e-20, lambda = 10)
fit_glmnet <- glmnet(X.scale, Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20, lambda = 10)
beta2 <- as.vector(coef(fit_glmnet))
beta2
coef(fit_glmnet)
fit_glmnet <- glmnet(X.scale, Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20, lambda = 10/n)
coef(fit_glmnet))
coef(fit_glmnet)
beta1 <-solve(t(X.scale)%*%X.scale+10*diag(1,13))%*%t(X.scale)%*%Y.scale
beta1
coef(fit_glmnet)*sd_y
solve(t(X.scale)%*%X.scale+10*diag(1,13))%*%t(X.scale)%*%Y.scale
library(glmnet)
n <- dim(Y.scale)[1]
p <- dim(X.scale)[2]
sd_y <- sqrt(var(Y.scale)*(n-1)/n)[1,1]
beta1 <- solve(t(X.scale)%*%X.scale+10*diag(p),t(X.scale)%*%(Y.scale))[,1]
fit_glmnet <- glmnet(X.scale, Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20, lambda = 10/n)
coef(fit_glmnet)*sd_y
sd_y
fit_glmnet <- glmnet(X.scale, Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20, lambda = sd_y*10/n)
coef(fit_glmnet)
solve(t(X.scale)%*%X.scale+10*diag(1,13))%*%t(X.scale)%*%Y.scale
cv.glmnet()
cv.glmnet
sample(rep(seq(10), length = 10))
sample(rep(seq(10), length = 100))
lam <- 10
solve(t(X.scale)%*%X.scale+lam*diag(1,13))%*%t(X.scale)%*%Y.scale
library(glmnet)
n <- dim(Y.scale)[1]
p <- dim(X.scale)[2]
sd_y <- sqrt(var(Y.scale)*(n-1)/n)[1,1]
beta1 <- solve(t(X.scale)%*%X.scale+lam*diag(p),t(X.scale)%*%(Y.scale))[,1]
fit_glmnet <- glmnet(X.scale, Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-20, lambda = sd_y*10/n)
coef(fit_glmnet)
cbind(beta1[1:10], beta2[1:10])
lam <- 10
solve(t(X.scale)%*%X.scale+lam*diag(1,13))%*%t(X.scale)%*%Y.scale
library(glmnet)
n <- dim(Y.scale)[1]
p <- dim(X.scale)[2]
sd_y <- sqrt(var(Y.scale)*(n-1)/n)[1,1]
beta1 <- solve(t(X.scale)%*%X.scale+lam*diag(p),t(X.scale)%*%(Y.scale))[,1]
fit_glmnet <- glmnet(X.scale, Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-200, lambda = sd_y*10/n)
coef(fit_glmnet)
cbind(beta1[1:10], beta2[1:10])
lam <- 10
library(glmnet)
n <- dim(Y.scale)[1]
p <- dim(X.scale)[2]
sd_y <- sqrt(var(Y.scale)*(n-1)/n)[1,1]
beta1 <- solve(t(X.scale)%*%X.scale+lam*diag(p),t(X.scale)%*%(Y.scale))[,1]
fit_glmnet <- glmnet(X.scale, Y.scale, alpha=0, standardize = F, intercept = FALSE, thresh = 1e-200, lambda = sd_y*lam/n)
coef(fit_glmnet)
cbind(beta1[1:10], beta2[1:10])
?glmnet
?cv.glmnet
?do.call
x<-X.scale
y<-Y.scale
lambda <- 10
type.measure <- "deviance"
x<-X.scale
y<-Y.scale
lambda <- 10
type.measure <- "deviance"
offset <- NULL
nfolds = 10
foldid <- NULL
grouped = TRUE
keep = FALSE
parallel = FALSE
if (missing(type.measure))
type.measure = "default"
else type.measure = match.arg(type.measure)
if (!is.null(lambda) && length(lambda) < 2)
stop("Need more than one value of lambda for cv.glmnet")
if (missing(type.measure))
type.measure = "default"
else type.measure = match.arg(type.measure)
if (!is.null(lambda) && length(lambda) < 2)
stop("Need more than one value of lambda for cv.glmnet")
N = nrow(x)
if (missing(weights))
weights = rep(1, N)
else weights = as.double(weights)
y = drop(y)
glmnet.call = match.call(expand.dots = TRUE)
which = match(c("type.measure", "nfolds", "foldid", "grouped",
"keep"), names(glmnet.call), F)
if (any(which))
glmnet.call = glmnet.call[-which]
glmnet.call[[1]] = as.name("glmnet")
glmnet.object = glmnet(x, y, weights = weights, offset = offset,
lambda = lambda, ...)
glmnet.object$call = glmnet.call
subclass = class(glmnet.object)[[1]]
type.measure = cvtype(type.measure, subclass)
is.offset = glmnet.object$offset
if (inherits(glmnet.object, "multnet") && !glmnet.object$grouped) {
nz = predict(glmnet.object, type = "nonzero")
nz = sapply(nz, function(x) sapply(x, length))
nz = ceiling(apply(nz, 1, median))
}
else nz = sapply(predict(glmnet.object, type = "nonzero"),
length)
if (missing(foldid))
foldid = sample(rep(seq(nfolds), length = N))
else nfolds = max(foldid)
if (nfolds < 3)
stop("nfolds must be bigger than 3; nfolds=10 recommended")
outlist = as.list(seq(nfolds))
if (parallel) {
outlist = foreach(i = seq(nfolds), .packages = c("glmnet")) %dopar%
{
which = foldid == i
if (length(dim(y)) > 1)
y_sub = y[!which, ]
else y_sub = y[!which]
if (is.offset)
offset_sub = as.matrix(offset)[!which, ]
else offset_sub = NULL
glmnet(x[!which, , drop = FALSE], y_sub, lambda = lambda,
offset = offset_sub, weights = weights[!which],
...)
}
}
else {
for (i in seq(nfolds)) {
which = foldid == i
if (is.matrix(y))
y_sub = y[!which, ]
else y_sub = y[!which]
if (is.offset)
offset_sub = as.matrix(offset)[!which, ]
else offset_sub = NULL
outlist[[i]] = glmnet(x[!which, , drop = FALSE],
y_sub, lambda = lambda, offset = offset_sub,
weights = weights[!which], ...)
}
}
fun = paste("cv", subclass, sep = ".")
lambda = glmnet.object$lambda
cvstuff = do.call(fun, list(outlist, lambda, x, y, weights,
offset, foldid, type.measure, grouped, keep))
cvm = cvstuff$cvm
cvsd = cvstuff$cvsd
nas = is.na(cvsd)
if (any(nas)) {
lambda = lambda[!nas]
cvm = cvm[!nas]
cvsd = cvsd[!nas]
nz = nz[!nas]
}
cvname = names(cvstuff$type.measure)
names(cvname) = cvstuff$type.measure
out = list(lambda = lambda, cvm = cvm, cvsd = cvsd, cvup = cvm +
cvsd, cvlo = cvm - cvsd, nzero = nz, name = cvname, glmnet.fit = glmnet.object)
if (keep)
out = c(out, list(fit.preval = cvstuff$fit.preval, foldid = foldid))
lamin = if (cvname == "AUC")
getmin(lambda, -cvm, cvsd)
else getmin(lambda, cvm, cvsd)
obj = c(out, as.list(lamin))
class(obj) = "cv.glmnet"
obj
if (missing(type.measure))
type.measure = "default"
else type.measure = match.arg(type.measure)
if (!is.null(lambda) && length(lambda) < 2)
stop("Need more than one value of lambda for cv.glmnet")
N = nrow(x)
if (missing(weights))
weights = rep(1, N)
else weights = as.double(weights)
y = drop(y)
glmnet.call = match.call(expand.dots = TRUE)
which = match(c("type.measure", "nfolds", "foldid", "grouped",
"keep"), names(glmnet.call), F)
if (any(which))
glmnet.call = glmnet.call[-which]
glmnet.call[[1]] = as.name("glmnet")
glmnet.object = glmnet(x, y, weights = weights, offset = offset,
lambda = lambda, ...)
glmnet.object$call = glmnet.call
subclass = class(glmnet.object)[[1]]
type.measure = cvtype(type.measure, subclass)
is.offset = glmnet.object$offset
if (inherits(glmnet.object, "multnet") && !glmnet.object$grouped) {
nz = predict(glmnet.object, type = "nonzero")
nz = sapply(nz, function(x) sapply(x, length))
nz = ceiling(apply(nz, 1, median))
}
?cv
paste("cv", subclass, sep = ".")
