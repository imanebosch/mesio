}
df.opt <- results[results$mssr==max(results$mssr),][,1]
print(df.opt)
ggplot(data.frame(results$h, results$mssr), aes(x=results$h, y = results$mssr)) +
geom_point() + ylab("Accuracy") + xlab("Degrees of freedom") +
geom_vline(aes(xintercept = df.opt), color = "red")
set.seed(1994)
df.v <- 3:15
results <- data.frame(h=as.numeric(),mssr=as.numeric())
for (i in 1:length(df.v)) {
#we set k=5 to use 5 folds
mssr <- k.fold.cv(x=temp,y=cnt.5000,df=df.v[i],k = 5)
results[i,] <- c(df.v[i],mssr)
}
df.opt <- results[results$mssr==max(results$mssr),][,1]
print(df.opt)
k.fold.cv <- function(x,y,k=5,df=6){
n <- length(x)
Ik <- floor((0:(n-1))/(n/k))+1
ssr <- 0
for (i in (1:k)){
y.i <- y[Ik==i]
aux <- logistic.IRWLS.splines(x[Ik!=i], y[Ik!=i], x.new = x[Ik==i],
df = df, plts = FALSE)
right <- sum((y==ceiling(aux$predicted.values) & aux$predicted.values>0.5) ||
(y==floor(aux$predicted.values) & aux$predicted.values=<0.5))
k.fold.cv <- function(x,y,k=5,df=6){
n <- length(x)
Ik <- floor((0:(n-1))/(n/k))+1
ssr <- 0
for (i in (1:k)){
y.i <- y[Ik==i]
aux <- logistic.IRWLS.splines(x[Ik!=i], y[Ik!=i], x.new = x[Ik==i],
df = df, plts = FALSE)
right <- sum((y==ceiling(aux$predicted.values) & aux$predicted.values>=0.5) ||
(y==floor(aux$predicted.values) & aux$predicted.values<0.5))
ssr <- ssr + right
}
k.cv <- ssr/n
return(k.cv)
}
set.seed(1994)
df.v <- 3:15
results <- data.frame(h=as.numeric(),mssr=as.numeric())
for (i in 1:length(df.v)) {
#we set k=5 to use 5 folds
mssr <- k.fold.cv(x=temp,y=cnt.5000,df=df.v[i],k = 5)
results[i,] <- c(df.v[i],mssr)
}
df.opt <- results[results$mssr==max(results$mssr),][,1]
print(df.opt)
ggplot(data.frame(results$h, results$mssr), aes(x=results$h, y = results$mssr)) +
geom_point() + ylab("Accuracy") + xlab("Degrees of freedom") +
geom_vline(aes(xintercept = df.opt[1]), color = "red")
results
floor(0.5)
floor(0.4)
k.fold.cv <- function(x,y,k=5,df=6){
n <- length(x)
Ik <- floor((0:(n-1))/(n/k))+1
ssr <- 0
for (i in (1:k)){
y.i <- y[Ik==i]
aux <- logistic.IRWLS.splines(x[Ik!=i], y[Ik!=i], x.new = x[Ik==i],
df = df, plts = FALSE)
right <- sum((y==ceiling(aux$predicted.values) & aux$predicted.values>=0.5) ||
(y==floor(aux$predicted.values) & aux$predicted.values<0.5))
ssr <- ssr + right
}
k.cv <- ssr/n
return(k.cv)
}
set.seed(1994)
df.v <- 3:15
results <- data.frame(h=as.numeric(),mssr=as.numeric())
for (i in 1:length(df.v)) {
#we set k=5 to use 5 folds
mssr <- k.fold.cv(x=temp,y=cnt.5000,df=df.v[i],k = 5)
results[i,] <- c(df.v[i],mssr)
}
df.opt <- results[results$mssr==max(results$mssr),][,1]
print(df.opt)
results
k <- 5
x
i <- 1
k <- 5
i <- 1
x <- temp
y<- cnt.5000
n <- length(x)
Ik <- floor((0:(n-1))/(n/k))+1
ssr <- 0
y.i <- y[Ik==i]
aux <- logistic.IRWLS.splines(x[Ik!=i], y[Ik!=i], x.new = x[Ik==i],
df = df, plts = FALSE)
k <- 5
i <- 1
x <- temp
y<- cnt.5000
df <- 6
n <- length(x)
Ik <- floor((0:(n-1))/(n/k))+1
ssr <- 0
y.i <- y[Ik==i]
aux <- logistic.IRWLS.splines(x[Ik!=i], y[Ik!=i], x.new = x[Ik==i],
df = df, plts = FALSE)
right <- sum((y==ceiling(aux$predicted.values) & aux$predicted.values>=0.5) ||
(y==floor(aux$predicted.values) & aux$predicted.values<0.5))
right
(y==ceiling(aux$predicted.values) & aux$predicted.values>=0.5)
(y==floor(aux$predicted.values) & aux$predicted.values<0.5)
(y==ceiling(aux$predicted.values) & aux$predicted.values>=0.5) ||
(y==floor(aux$predicted.values) & aux$predicted.values<0.5)
(y==ceiling(aux$predicted.values) & aux$predicted.values>=0.5) ||
(y==floor(aux$predicted.values) & aux$predicted.values<0.5)
right <- sum((y==ceiling(aux$predicted.values) & aux$predicted.values>=0.5))
right <- right + sum(y==floor(aux$predicted.values) & aux$predicted.values<0.5)
right
sum((y==ceiling(aux$predicted.values) & aux$predicted.values>=0.5))
k.fold.cv <- function(x,y,k=5,df=6){
n <- length(x)
Ik <- floor((0:(n-1))/(n/k))+1
ssr <- 0
for (i in (1:k)){
y.i <- y[Ik==i]
aux <- logistic.IRWLS.splines(x[Ik!=i], y[Ik!=i], x.new = x[Ik==i],
df = df, plts = FALSE)
right <- sum((y==ceiling(aux$predicted.values) & aux$predicted.values>=0.5))
right <- right + sum(y==floor(aux$predicted.values) & aux$predicted.values<0.5)
ssr <- ssr + right
}
k.cv <- ssr/n
return(k.cv)
}
set.seed(1994)
df.v <- 3:15
results <- data.frame(h=as.numeric(),mssr=as.numeric())
for (i in 1:length(df.v)) {
#we set k=5 to use 5 folds
mssr <- k.fold.cv(x=temp,y=cnt.5000,df=df.v[i],k = 5)
results[i,] <- c(df.v[i],mssr)
}
df.opt <- results[results$mssr==max(results$mssr),][,1]
print(df.opt)
ggplot(data.frame(results$h, results$mssr), aes(x=results$h, y = results$mssr)) +
geom_point() + ylab("Accuracy") + xlab("Degrees of freedom") +
geom_vline(aes(xintercept = df.opt[1]), color = "red")
k <- 5
i <- 1
x <- temp
y<- cnt.5000
df <- 6
n <- length(x)
Ik <- floor((0:(n-1))/(n/k))+1
ssr <- 0
y.i <- y[Ik==i]
aux <- logistic.IRWLS.splines(x[Ik!=i], y[Ik!=i], x.new = x[Ik==i],
df = df, plts = FALSE)
right <- sum((y==ceiling(aux$predicted.values) & aux$predicted.values>=0.5))
right <- right + sum(y==floor(aux$predicted.values) & aux$predicted.values<0.5)
ssr <- ssr + right
k.cv <- ssr/n
k.cv
n <- length(x)
Ik <- floor((0:(n-1))/(n/k))+1
ssr <- 0
y.i <- y[Ik==i]
aux <- logistic.IRWLS.splines(x[Ik!=i], y[Ik!=i], x.new = x[Ik==i],
df = df, plts = FALSE)
right <- sum((y==ceiling(aux$predicted.values) & aux$predicted.values>=0.5))
right <- right + sum(y==floor(aux$predicted.values) & aux$predicted.values<0.5)
ssr <- ssr + right
acc.table <- table(y,ifelse(aux$predicted.values>0.5,1,0))
y<- cnt.5000
n <- length(x)
Ik <- floor((0:(n-1))/(n/k))+1
ssr <- 0
for (i in (1:k)){
y.i <- y[Ik==i]
aux <- logistic.IRWLS.splines(x[Ik!=i], y[Ik!=i], x.new = x[Ik==i],
df = df, plts = FALSE)
right <- sum((y==ceiling(aux$predicted.values) & aux$predicted.values>=0.5))
right <- right + sum(y==floor(aux$predicted.values) & aux$predicted.values<0.5)
acc.table <- table(y,ifelse(aux$predicted.values>0.5,1,0))
acc.df.iteration[j] <- (acc.table[1,1]+acc.table[2,2])/sum(acc.table)
ssr <- ssr + right
}
n <- length(x)
ssr <- 0
for (i in (1:k)){
y.i <- y[Ik==i]
aux <- logistic.IRWLS.splines(x[Ik!=i], y[Ik!=i], x.new = x[Ik==i],
df = df, plts = FALSE)
right <- sum((y.i==ceiling(aux$predicted.values) & aux$predicted.values>=0.5))
right <- right + sum(y.i==floor(aux$predicted.values) & aux$predicted.values<0.5)
ssr <- ssr + right
}
k.cv <- ssr/n
k.cv
k <- 5
i <- 1
x <- temp
y<- cnt.5000
df <- 6
k.fold.cv <- function(x,y,k=5,df=6){
n <- length(x)
Ik <- floor((0:(n-1))/(n/k))+1
ssr <- 0
for (i in (1:k)){
y.i <- y[Ik==i]
aux <- logistic.IRWLS.splines(x[Ik!=i], y[Ik!=i], x.new = x[Ik==i],
df = df, plts = FALSE)
right <- sum((y.i==ceiling(aux$predicted.values) & aux$predicted.values>=0.5))
right <- right + sum(y.i==floor(aux$predicted.values) & aux$predicted.values<0.5)
ssr <- ssr + right
}
k.cv <- ssr/n
return(k.cv)
}
k.fold.cv <- function(x,y,k=5,df=6){
n <- length(x)
Ik <- floor((0:(n-1))/(n/k))+1
ssr <- 0
for (i in (1:k)){
y.i <- y[Ik==i]
aux <- logistic.IRWLS.splines(x[Ik!=i], y[Ik!=i], x.new = x[Ik==i],
df = df, plts = FALSE)
right <- sum((y.i==ceiling(aux$predicted.values) & aux$predicted.values>=0.5))
right <- right + sum(y.i==floor(aux$predicted.values) & aux$predicted.values<0.5)
ssr <- ssr + right
}
k.cv <- ssr/n
return(k.cv)
}
set.seed(1994)
df.v <- 3:15
results <- data.frame(h=as.numeric(),mssr=as.numeric())
for (i in 1:length(df.v)) {
#we set k=5 to use 5 folds
mssr <- k.fold.cv(x=temp,y=cnt.5000,df=df.v[i],k = 5)
results[i,] <- c(df.v[i],mssr)
}
df.opt <- results[results$mssr==max(results$mssr),][,1]
print(df.opt)
ggplot(data.frame(results$h, results$mssr), aes(x=results$h, y = results$mssr)) +
geom_point() + ylab("Accuracy") + xlab("Degrees of freedom") +
geom_vline(aes(xintercept = df.opt[1]), color = "red")
k <- 5
i <- 1
x <- temp
y<- cnt.5000
df <- 6
n <- length(x)
Ik <- floor((0:(n-1))/(n/k))+1
ssr <- 0
y.i <- y[Ik==i]
aux <- logistic.IRWLS.splines(x[Ik!=i], y[Ik!=i], x.new = x[Ik==i],
df = df, plts = FALSE)
right <- sum((y.i==ceiling(aux$predicted.values) & aux$predicted.values>=0.5))
right <- right + sum(y.i==floor(aux$predicted.values) & aux$predicted.values<0.5)
right
right
ssr <- ssr + right
y.i==ceiling(aux$predicted.values) & aux$predicted.values>=0.5
y[Ik==i]
ceiling(aux$predicted.values)
y.i
set.seed(1994)
accuracy <- NULL
for (i in 1:length(df.s)){
#folds definition
folds <- as.numeric(sample(rep(1:k,length.out = length(temp))))
acc.df.iteration <- NULL
for (j in 1:k ){
#validation data
x.val <- temp[which(folds == j)]
y.val <- cnt.5000[which(folds == j)]
#training data
x.train <- temp[which(folds != j)]
y.train <- cnt.5000[which(folds != j)]
#regression estimation for each df value
log.reg.cv <- logistic.IRWLS.splines(x = x.train,y = y.train,x.new = x.val,df = df.s[i],plts = FALSE)
#accuracy in the regression
acc.table <- table(y.val,ifelse(log.reg.cv$predicted.values>0.5,1,0))
acc.df.iteration[j] <- (acc.table[1,1]+acc.table[2,2])/sum(acc.table)
}
accuracy[i] <- mean(acc.df.iteration)
}
ggplot(as.data.frame(df.s,accuracy))+geom_point(aes(df.s,accuracy))+
geom_line(data=as.data.frame(df.s,accuracy),aes(df.s,accuracy))+
ggtitle(label="Accuracy in the prediction")+
theme(plot.title = element_text(hjust = 0.5))+
geom_vline(xintercept = df.s[which.max(accuracy)],color='red')
ggplot(as.data.frame(df.s,accuracy))+
geom_point(aes(df.s,accuracy))+
geom_line(data=as.data.frame(df.s,accuracy),aes(df.s,accuracy))+
ggtitle(label="Accuracy in the prediction")+
theme(plot.title = element_text(hjust = 0.5))+
geom_vline(xintercept = df.s[which.max(accuracy)],color='red')
set.seed(1994)
accuracy <- NULL
folds <- as.numeric(sample(rep(1:k,length.out = length(temp))))
for (i in 1:length(df.s)){
#folds definition
acc.df.iteration <- NULL
for (j in 1:k ){
#validation data
x.val <- temp[which(folds == j)]
y.val <- cnt.5000[which(folds == j)]
#training data
x.train <- temp[which(folds != j)]
y.train <- cnt.5000[which(folds != j)]
#regression estimation for each df value
log.reg.cv <- logistic.IRWLS.splines(x = x.train,y = y.train,x.new = x.val,df = df.s[i],plts = FALSE)
#accuracy in the regression
acc.table <- table(y.val,ifelse(log.reg.cv$predicted.values>0.5,1,0))
acc.df.iteration[j] <- (acc.table[1,1]+acc.table[2,2])/sum(acc.table)
}
accuracy[i] <- mean(acc.df.iteration)
}
ggplot(as.data.frame(df.s,accuracy))+
geom_point(aes(df.s,accuracy))+
geom_line(data=as.data.frame(df.s,accuracy),aes(df.s,accuracy))+
ggtitle(label="Accuracy in the prediction")+
theme(plot.title = element_text(hjust = 0.5))+
geom_vline(xintercept = df.s[which.max(accuracy)],color='red')
set.seed(1994)
accuracy <- NULL
for (i in 1:length(df.s)){
#folds definition
folds <- as.numeric(sample(rep(1:k,length.out = length(temp))))
acc.df.iteration <- NULL
for (j in 1:k ){
#validation data
x.val <- temp[which(folds == j)]
y.val <- cnt.5000[which(folds == j)]
#training data
x.train <- temp[which(folds != j)]
y.train <- cnt.5000[which(folds != j)]
#regression estimation for each df value
log.reg.cv <- logistic.IRWLS.splines(x = x.train,y = y.train,x.new = x.val,df = df.s[i],plts = FALSE)
#accuracy in the regression
acc.table <- table(y.val,ifelse(log.reg.cv$predicted.values>0.5,1,0))
acc.df.iteration[j] <- (acc.table[1,1]+acc.table[2,2])/sum(acc.table)
}
accuracy[i] <- mean(acc.df.iteration)
}
ggplot(as.data.frame(df.s,accuracy))+
geom_point(aes(df.s,accuracy))+
geom_line(data=as.data.frame(df.s,accuracy),aes(df.s,accuracy))+
ggtitle(label="Accuracy in the prediction")+
theme(plot.title = element_text(hjust = 0.5))+
geom_vline(xintercept = df.s[which.max(accuracy)],color='red')
knitr::opts_chunk$set(echo = TRUE)
load("CHDdataMDS.rda")
print(Y[1:5, 1:5])
sum(is.na(Y)) # There are no missings
dim(Y)
Dm <- as.matrix(dist(Y, method = "manhattan"))
print(Dm[1:5,1:5])
out.mds <- cmdscale(Dm, eig = TRUE, k = 2)
par(mgp=c(2,0.5,0))
plot(out.mds$points[,1:2],  asp = 1,
cex.axis=0.8,cex.main=0.9, xlab = "Primera dimensión",
ylab = "Segunda dimensión", main = "Aproximación bi-dimensional")
outliers.val <- boxplot(out.mds$points)$out
outliers.index <- which(out.mds$points[,1] %in% outliers.val)
outliers.index <- c(outliers.index, which(out.mds$points[,2] %in% outliers.val))
rownames(out.mds$points[outliers.index, ])
p <- as.matrix(dist(out.mds$points, method ="euclidian"))
diag(p) <- NA # Para evitar que seleccione los 0 de la diagonal como mínimos
which(p == min(p, na.rm = TRUE), arr.ind = TRUE)
out.mds$points[c(40,79),]
which(p == max(p, na.rm = TRUE), arr.ind = TRUE)
which(p == max(p, na.rm = TRUE), arr.ind = TRUE)
out.mds$points[c(16,41),]
sum(round(out.mds$eig,4)==0)
out.mds$eig[1:5] # Hay tantos valores propios como observaciones
out.mds$GOF # Goodness of fit
y <- as.vector(dist(out.mds$points, method = "euclidian"))
x <- as.vector(dist(Y, method = "manhattan"))
par(mgp=c(2,0.5,0))
plot(x=x, y=y, xlab = "Original distances",
ylab = "Aproximated distances", asp=1,
cex.axis=0.8,cex.main=0.9, main = "Correlación entre distancias")
abline(a=0, b=1, col="red")
out.mds$GOF #els eigen values tots son positius
Y.wo <- Y[-outliers.index,] #by exercice 4
Dm.wo <- as.matrix(dist(Y.wo, method = "manhattan"))
out.mds.wo <- cmdscale(Dm.wo, k = 2, eig = TRUE)
par(mgp=c(2,0.5,0))
plot(out.mds.wo$points, asp = 1,
cex.axis=0.8,cex.main=0.9, xlab = "Primera dimensión",
ylab = "Segunda dimensión", main = "Aproximación bi-dimensional")
outliers.val <- boxplot(out.mds.wo$points)$out
outliers.index <- which(out.mds.wo$points[,1] %in% outliers.val)
outliers.index <- c(outliers.index, which(out.mds.wo$points[,2] %in% outliers.val))
Y.wo <- Y.wo[-outliers.index,]
Dm.wo <- as.matrix(dist(Y.wo, method = "manhattan"))
out.mds.wo <- cmdscale(Dm.wo, k = 2, eig = TRUE)
par(mgp=c(2,0.5,0))
plot(out.mds.wo$points, asp = 1,
cex.axis=0.8,cex.main=0.9, xlab = "Primera dimensión",
ylab = "Segunda dimensión", main = "Aproximación bi-dimensional")
par(mgp=c(2,0.5,0))
plot(out.mds.wo$points,xlab = "Primera dimensión", asp = 1,
cex.axis=0.8,cex.main=0.9,
ylab = "Segunda dimensión", main = "Aproximación bi-dimensional")
out.mds.wo$GOF
out.mds.wo$eig[1:5]
library(MASS)
nmmds.out <- isoMDS(Dm,k=2,maxit=100)
library(MASS)
nmmds.out <- isoMDS(Dm,k=2,maxit=100)
par(mgp=c(2,0.5,0))
plot(nmmds.out$points, asp = 1,
cex.axis=0.8,cex.main=0.9, xlab = "Primera dimensión",
ylab = "Segunda dimensión", main = "Aproximación bi-dimensional")
print(nmmds.out$stress)
set.seed(3455)
N <- 50
stress <- Inf
d <- 2
for (i in 1:N) {
init <- scale(matrix(runif(nrow(Dm)*d),ncol=d),scale=FALSE)
nmmds.out <- isoMDS(Dm,y=init,k=d,maxit=100)
st <- nmmds.out$stress
if (st < stress) {
stress <- st
points <- nmmds.out$points
}
}
par(mgp=c(2,0.5,0))
plot(points,xlab = "Primera dimensión", asp = 1,
cex.axis=0.8,cex.main=0.9,
ylab = "Segunda dimensión", main = "Aproximación bi-dimensional")
text(points,row.names(points), cex = 0.4)
print(stress)
d <- as.matrix(dist(points), method = "euclidean")
diag(d) <- NA
which(d==min(d, na.rm = TRUE), arr.ind = TRUE)
N <- 10
stress <- Inf
dims <- 20
results <- matrix(ncol=2,nrow = dims)
for (d in 1:dims) {
for (i in 1:N) {
init <- scale(matrix(runif(nrow(Dm)*d),ncol=d),scale=FALSE)
nmmds.out <- isoMDS(Dm,y=init,k=d,maxit=20)
st <- nmmds.out$stress
if (st < stress) {
stress <- st
}
}
results[d,] <- c(d,stress)
}
par(mgp=c(2,0.5,0))
plot(results,xlab = "Número de dimensiones",
cex.axis=0.8,cex.main=0.9,
ylab = "Nivel de stress", main = "Stress vs número de dimensiones utilizadas")
abline(h=10, col="red", lty=2)
y <- as.vector(dist(out.mds$points, method = "euclidian"))
x <- as.vector(dist(Y, method = "manhattan"))
par(mgp=c(2,0.5,0))
plot(x=x, y=y, asp=1, xlab = "Original distances",
ylab = "Aproximated distances",
cex.axis=0.8,cex.main=0.9, main = "Correlación entre distancias")
abline(a=0, b=1, col="red")
out.mds$GOF #els eigen values tots son positius
Y.wo <- Y[-outliers.index,] #by exercice 4
Dm.wo <- as.matrix(dist(Y.wo, method = "manhattan"))
out.mds.wo <- cmdscale(Dm.wo, k = 2, eig = TRUE)
par(mgp=c(2,0.5,0))
plot(out.mds.wo$points, asp = 1,
cex.axis=0.8,cex.main=0.9, xlab = "Primera dimensión",
ylab = "Segunda dimensión", main = "Aproximación bi-dimensional")
outliers.val <- boxplot(out.mds.wo$points)$out
outliers.index <- which(out.mds.wo$points[,1] %in% outliers.val)
outliers.index <- c(outliers.index, which(out.mds.wo$points[,2] %in% outliers.val))
Y.wo <- Y.wo[-outliers.index,]
Dm.wo <- as.matrix(dist(Y.wo, method = "manhattan"))
out.mds.wo <- cmdscale(Dm.wo, k = 2, eig = TRUE)
par(mgp=c(2,0.5,0))
plot(out.mds.wo$points, asp = 1,
cex.axis=0.8,cex.main=0.9, xlab = "Primera dimensión",
ylab = "Segunda dimensión", main = "Aproximación bi-dimensional")
par(mgp=c(2,0.5,0))
plot(points, asp = 1,
cex.axis=0.8,cex.main=0.9, xlab = "Primera dimensión",
ylab = "Segunda dimensión", main = "Aproximación bi-dimensional")
text(points,row.names(points), cex = 0.4)
par(mgp=c(2,0.5,0))
plot(points, asp = 1,
cex.axis=0.8,cex.main=0.9, cex=0.5, xlab = "Primera dimensión",
ylab = "Segunda dimensión", main = "Aproximación bi-dimensional")
text(points,row.names(points), cex = 0.4)
par(mgp=c(2,0.5,0))
plot(points, asp = 1,
cex.axis=0.8,cex.main=0.9, cex=0.5, xlab = "Primera dimensión",
ylab = "Segunda dimensión", main = "Aproximación bi-dimensional")
text(points,row.names(points), cex = 0.4)
par(mgp=c(2,0.5,0))
plot(points, asp = 1,
cex.axis=0.8,cex.main=0.9, cex=0.5, xlab = "Primera dimensión",
ylab = "Segunda dimensión", main = "Aproximación bi-dimensional")
text(points,row.names(points), cex = 0.5)
par(mgp=c(2,0.5,0))
plot(points, asp = 1,
cex.axis=0.8,cex.main=0.9, cex=0.5, xlab = "Primera dimensión",
ylab = "Segunda dimensión", main = "Aproximación bi-dimensional")
text(points,row.names(points), cex = 0.4)
