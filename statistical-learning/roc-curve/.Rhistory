cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.spam.test, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curve for the Glm Algorithm")
ROC.obj$AUC
x <- as.matrix(test[,!names(test) %in% c("spam.01")])
pred.glm.lasso.test <- predict(glm.lasso, newx = x, type="response")
J <- 201
cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.lasso.test, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curve for Lasso Regression")
ROC.obj$AUC
x <- test[,!names(test) %in% c("spam.01")]
pred.glm.knn.test <- predict(knn, newdata = x, type="prob")
J <- 201
cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.knn.test$`1`, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curve for k-nearest-neighbors,")
ROC.obj$AUC
J <- 201
cut.points <- (0:J)/J
ROC.obj.glm <- ROC(status=test$spam.01, marker=pred.glm.spam.test, cut.values=cut.points)
ROC.obj.lasso <- ROC(status=test$spam.01, marker=pred.glm.lasso.test, cut.values=cut.points)
ROC.obj.knn <- ROC(status=test$spam.01, marker=pred.glm.knn.test$`1`, cut.values=cut.points)
plot(ROC.obj.glm$FP, ROC.obj.glm$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=1,
main="ROC Curves", col=2)
lines(ROC.obj.lasso$FP, ROC.obj.lasso$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=1, col=3)
lines(ROC.obj.knn$FP, ROC.obj.knn$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=1, col=4)
legend(x="bottomright",c("Glm", "Lasso", "Knn"), cex = 0.75, lty = 1, col = c(2,3,4))
sumry <- rbind(ROC.obj.glm$AUC,ROC.obj.lasso$AUC,ROC.obj.knn$AUC)
colnames(sumry) <- "AUC"
rownames(sumry) <- c("glm","lasso","knn")
print(sumry)
table( spam$spam.01[spam.test], pred.glm.spam.test>.5 )
table( spam$spam.01[spam.test], pred.glm.spam.test>.5 )
table( spam$spam.01[spam.test], pred.glm.knn.test$`1`>.5 )
pred.glm.spam.test <- predict(glm.spam.tr, newdata = test, type="response")
mean(as.numeric(as.character(test$spam.01))*log(pred.glm.spam.test) +
(1-as.numeric(as.character(test$spam.01)))*log(1-pred.glm.spam.test))
x <- as.matrix(test[,!names(test) %in% c("spam.01")])
pred.glm.lasso.test <- predict(glm.lasso, newx = x, type="response")
filter <- !pred.glm.lasso.test %in% c(0,1)
epsi <- min(pred.glm.lasso.test[filter,],1-pred.glm.lasso.test[filter,])
filt0 <- pred.glm.lasso.test==0
filt1 <- pred.glm.lasso.test==1
pred.glm.lasso.test[filt0,] <- epsi
pred.glm.lasso.test[filt1,] <- 1-1e-10
mean(as.numeric(as.character(test$spam.01))*log(pred.glm.lasso.test) +
(1-as.numeric(as.character(test$spam.01)))*log(1-pred.glm.lasso.test))
x <- test[,!names(test) %in% c("spam.01")]
pred.glm.knn.test <- predict(knn, newdata = x, type="prob")
filter <- !pred.glm.knn.test$`1` %in% c(0,1)
epsi <- min(pred.glm.knn.test$`1`[filter],1-pred.glm.knn.test$`1`[filter])
filt0 <- pred.glm.knn.test$`1`==0
filt1 <- pred.glm.knn.test$`1`==1
pred.glm.knn.test$`1`[filt0] <- epsi
pred.glm.knn.test$`1`[filt1] <- 1-epsi
mean(as.numeric(as.character(test$spam.01))*log(pred.glm.knn.test$`1`) +
(1-as.numeric(as.character(test$spam.01)))*log(1-pred.glm.knn.test$`1`))
k.opt
k.opt
knitr::opts_chunk$set(echo = TRUE)
par(mar = c(4,3,5.5,1), mgp=c(1.5,0.5,0))
plot(glm.spam.lasso, ylab="Mean Square Error",
cex.axis=0.8, cex.lab=0.9, main="Mean Square Error of Lambda")
library(glmnet)
library(caret)
library(class)
library(ROC632)
library(e1071)
spam <- read.table("spambase.data",sep=",")
spam.names <- c(read.table("spambase.names",sep=":",skip=33,nrows=53,as.is=TRUE)[,1],
"char_freq_#",
read.table("spambase.names",sep=":",skip=87,nrows=3,as.is=TRUE)[,1],
"spam.01")
names(spam) <- spam.names
spam$spam.01 <- as.factor(spam$spam.01)
spam.01 <- spam$spam.01
set.seed(5745)
n<-dim(spam)[1]
p<-dim(spam)[2]-1
spam.1 <- which(spam.01==1)
spam.0 <- which(spam.01==0)
n1 <- length(spam.1)
n0 <- length(spam.0)
spam.1.tr <- sort(sample(spam.1, round(2*n1/3)))
spam.0.tr <- sort(sample(spam.0, round(2*n0/3)))
spam.1.test <- setdiff(spam.1,spam.1.tr)
spam.0.test <- setdiff(spam.0,spam.0.tr)
spam.tr <- union(spam.1.tr,spam.0.tr)
spam.test <- union(spam.1.test,spam.0.test)
n.tr <- length(spam.tr)
n.test <- length(spam.test)
train <- spam[spam.tr,]
test <- spam[spam.test,]
glm.spam.tr <- glm(spam.01~., data=train, family = binomial(link = logit))
y <- train$spam.01
x <- as.matrix(train[,!names(train) %in% c("spam.01")])
glm.spam.lasso <- cv.glmnet(y=y, x=x, family = "binomial", nfolds=10,
standardize=TRUE, intercept=TRUE, alpha = 1)
lambda.opt <- glm.spam.lasso$lambda.min
lambda.opt
par(mar = c(4,3,5.5,1), mgp=c(1.5,0.5,0))
plot(glm.spam.lasso, ylab="Mean Square Error",
cex.axis=0.8, cex.lab=0.9, main="Mean Square Error of Lambda")
abline(v=log(glm.spam.lasso$lambda.min),col=2,lty=2)
abline(v=log(glm.spam.lasso$lambda.1se),col=2,lty=2)
par(mar = c(4,3,5.5,1), mgp=c(1.5,0.5,0))
plot(glm.spam.lasso, ylab="Mean Square Error",
cex.axis=0.8, cex.lab=0.9, main="Mean Square Error of Lambda")
abline(v=log(glm.spam.lasso$lambda.min),col=2,lty=2)
?train
glm.lasso <- glmnet(y=y, x=x,lambda = lambda.opt, family = "binomial",
standardize = TRUE, intercept = TRUE, alpha = 1)
k <- seq(from=1, to=50, by=1)
y <- train$spam.01
x <- train[,!names(train) %in% c("spam.01")]
knn.spam <- train(x=x,y=y, method="knn",
trControl = trainControl(method = "cv", number = 10),
metric="Accuracy", tuneGrid = expand.grid(k = k),
preProcess = c("center","scale"))
k.opt <- knn.spam$bestTune
k.opt
print(k.opt)
par(mar = c(4,3,5.5,1), mgp=c(1.5,0.5,0))
plot(knn.spam, ylab="Accuracy", xlab= "Neighbors",cex.axis=0.8, cex.lab=0.9, main="Accuracy for each K Neighbors")
par(mar = c(4,3,5.5,1), mgp=c(1.5,0.5,0))
plot(knn.spam, ylab="Accuracy", xlab= "Neighbors",cex.axis=0.8, cex.lab=0.9, main="Accuracy for each value of k Neighbors")
print(k.opt)
print(k.opt)
par(mar = c(4,3,5.5,1), mgp=c(1.5,0.5,0))
plot(knn.spam, ylab="Accuracy", xlab= "Neighbors",cex.axis=0.8, cex.lab=0.9, main="Accuracy for each value of k-Neighbors")
knn <- train(x = x, y=y, method="knn", metric="Accuracy",
tuneGrid = expand.grid(k = k.opt), preProcess = c("center","scale"))
pred.glm.spam.test <- predict(glm.spam.tr, newdata = test, type="response")
J <- 201
cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.spam.test, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curve for the Glm Algorithm")
clip(x1=0,x2=1,y1=0,y2=1)
abline(a=0, b=1,col=2,lty=3)
abline(v=0,col=1,lty=3)
abline(v=1,col=1,lty=3)
abline(h=1,col=1,lty=3)
abline(h=0,col=1,lty=3)
ROC.obj$AUC
x <- as.matrix(test[,!names(test) %in% c("spam.01")])
pred.glm.lasso.test <- predict(glm.lasso, newx = x, type="response")
J <- 201
cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.lasso.test, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curve for Lasso Regression")
clip(x1=0,x2=1,y1=0,y2=1)
abline(a=0, b=1,col=2,lty=3)
abline(v=0,col=1,lty=3)
abline(v=1,col=1,lty=3)
abline(h=1,col=1,lty=3)
abline(h=0,col=1,lty=3)
ROC.obj$AUC
x <- test[,!names(test) %in% c("spam.01")]
pred.glm.knn.test <- predict(knn, newdata = x, type="prob")
J <- 201
cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.knn.test$`1`, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curve for k-nearest-neighbors,")
clip(x1=0,x2=1,y1=0,y2=1)
abline(a=0, b=1,col=2,lty=3)
abline(v=0,col=1,lty=3)
abline(v=1,col=1,lty=3)
abline(h=1,col=1,lty=3)
abline(h=0,col=1,lty=3)
ROC.obj$TP
ROC.obj$FP
cut.points
J <- 201
cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.knn.test$`1`, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curve for k-nearest-neighbors,")
clip(x1=0,x2=1,y1=0,y2=1)
abline(a=0, b=1,col=2,lty=3)
abline(v=0,col=1,lty=3)
abline(v=1,col=1,lty=3)
abline(h=1,col=1,lty=3)
abline(h=0,col=1,lty=3)
?ROC
J <- 55
cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.knn.test$`1`, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curve for k-nearest-neighbors,")
clip(x1=0,x2=1,y1=0,y2=1)
abline(a=0, b=1,col=2,lty=3)
abline(v=0,col=1,lty=3)
abline(v=1,col=1,lty=3)
abline(h=1,col=1,lty=3)
abline(h=0,col=1,lty=3)
J <- 201
cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.knn.test$`1`, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curve for k-nearest-neighbors,")
clip(x1=0,x2=1,y1=0,y2=1)
abline(a=0, b=1,col=2,lty=3)
abline(v=0,col=1,lty=3)
abline(v=1,col=1,lty=3)
abline(h=1,col=1,lty=3)
abline(h=0,col=1,lty=3)
J <- 201
cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.knn.test$`1`, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curve for k-nearest-neighbors,")
clip(x1=0,x2=1,y1=0,y2=1)
abline(a=0, b=1,col=2,lty=3)
abline(v=0,col=1,lty=3)
abline(v=1,col=1,lty=3)
abline(h=1,col=1,lty=3)
abline(h=0,col=1,lty=3)
ROC.obj$TP
ROC.obj$FP
J <- 201
cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.knn.test$`1`, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curve for k-nearest-neighbors,", xlim=c(1,0))
clip(x1=0,x2=1,y1=0,y2=1)
abline(a=0, b=1,col=2,lty=3)
abline(v=0,col=1,lty=3)
abline(v=1,col=1,lty=3)
abline(h=1,col=1,lty=3)
abline(h=0,col=1,lty=3)
J <- 201
cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.knn.test$`1`, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curve for k-nearest-neighbors,", xlim=c(0,1))
clip(x1=0,x2=1,y1=0,y2=1)
abline(a=0, b=1,col=2,lty=3)
abline(v=0,col=1,lty=3)
abline(v=1,col=1,lty=3)
abline(h=1,col=1,lty=3)
abline(h=0,col=1,lty=3)
J <- 201
cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.lasso.test, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curve for Lasso Regression")
clip(x1=0,x2=1,y1=0,y2=1)
abline(a=0, b=1,col=2,lty=3)
abline(v=0,col=1,lty=3)
abline(v=1,col=1,lty=3)
abline(h=1,col=1,lty=3)
abline(h=0,col=1,lty=3)
ROC.obj$FP
ROC.obj$TP
J <- 201
cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.knn.test$`1`, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curve for k-nearest-neighbors,", xlim=c(0,1))
clip(x1=0,x2=1,y1=0,y2=1)
abline(a=0, b=1,col=2,lty=3)
abline(v=0,col=1,lty=3)
abline(v=1,col=1,lty=3)
abline(h=1,col=1,lty=3)
abline(h=0,col=1,lty=3)
ROC.obj$FP
J <- 501
cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.knn.test$`1`, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curve for k-nearest-neighbors,", xlim=c(0,1))
clip(x1=0,x2=1,y1=0,y2=1)
abline(a=0, b=1,col=2,lty=3)
abline(v=0,col=1,lty=3)
abline(v=1,col=1,lty=3)
abline(h=1,col=1,lty=3)
abline(h=0,col=1,lty=3)
J <- 201
cut.points <- (0:J)/J
ROC.obj.glm <- ROC(status=test$spam.01, marker=pred.glm.spam.test, cut.values=cut.points)
ROC.obj.lasso <- ROC(status=test$spam.01, marker=pred.glm.lasso.test, cut.values=cut.points)
ROC.obj.knn <- ROC(status=test$spam.01, marker=pred.glm.knn.test$`1`, cut.values=cut.points)
plot(ROC.obj.glm$FP, ROC.obj.glm$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=1,
main="ROC Curves", col=2)
lines(ROC.obj.lasso$FP, ROC.obj.lasso$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=1, col=3)
lines(ROC.obj.knn$FP, ROC.obj.knn$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=1, col=4)
legend(x="bottomright",c("Glm", "Lasso", "Knn"), cex = 0.75, lty = 1, col = c(2,3,4))
clip(x1=0,x2=1,y1=0,y2=1)
abline(a=0, b=1,col=2,lty=3)
abline(v=0,col=1,lty=3)
abline(h=1,col=1,lty=3)
sumry <- rbind(ROC.obj.glm$AUC,ROC.obj.lasso$AUC,ROC.obj.knn$AUC)
colnames(sumry) <- "AUC"
rownames(sumry) <- c("glm","lasso","knn")
print(sumry)
msr.lasso <- table( spam$spam.01[spam.test], pred.glm.lasso.test>.5 )
msr.lasso
paste("Missclassification rate of the Lasso prediction is: ",round((msr.lasso[1,2]+msr.lasso[2,1])/sum(msr.lasso),4))
msr.knn <- table( spam$spam.01[spam.test], pred.glm.knn.test$`1`>.5 )
msr.knn
paste("Missclassification rate of the Knn prediction is: ",round((msr.knn[1,2]+msr.knn[2,1])/sum(msr.knn),4))
msr <- matrix(0,ncol=2,nrow=3)
msr[,1] <- c("Glm", "Lasso", "Knn")
msr[,2] <- c(round((msr.glm[1,2]+msr.glm[2,1])/sum(msr.glm),4),
round((msr.lasso[1,2]+msr.lasso[2,1])/sum(msr.lasso),4),
round((msr.knn[1,2]+msr.knn[2,1])/sum(msr.knn),4))
msr <- matrix(0,ncol=2,nrow=3)
msr[,1] <- c("Glm", "Lasso", "Knn")
msr[,2] <- c(round((msr.glm[1,2]+msr.glm[2,1])/sum(msr.glm),4),
round((msr.lasso[1,2]+msr.lasso[2,1])/sum(msr.lasso),4),
round((msr.knn[1,2]+msr.knn[2,1])/sum(msr.knn),4))
msr.glm <-table( spam$spam.01[spam.test], pred.glm.spam.test>.5 )
msr.glm
paste("Missclassification rate of the Glm prediction is: ",round((msr.glm[1,2]+msr.glm[2,1])/sum(msr.glm),4))
msr <- matrix(0,ncol=2,nrow=3)
msr[,1] <- c("Glm", "Lasso", "Knn")
msr[,2] <- c(round((msr.glm[1,2]+msr.glm[2,1])/sum(msr.glm),4),
round((msr.lasso[1,2]+msr.lasso[2,1])/sum(msr.lasso),4),
round((msr.knn[1,2]+msr.knn[2,1])/sum(msr.knn),4))
colnames(msr) <- c("Model", "Missclassifiaction Rate")
msr
pred.glm.spam.test <- predict(glm.spam.tr, newdata = test, type="response")
mean(as.numeric(as.character(test$spam.01))*log(pred.glm.spam.test) +
(1-as.numeric(as.character(test$spam.01)))*log(1-pred.glm.spam.test))
pred.glm.spam.test <- predict(glm.spam.tr, newdata = test, type="response")
mean(as.numeric(as.character(test$spam.01))*log(pred.glm.spam.test) +
(1-as.numeric(as.character(test$spam.01)))*log(1-pred.glm.spam.test))
x <- test[,!names(test) %in% c("spam.01")]
pred.glm.knn.test <- predict(knn, newdata = x, type="prob")
filter <- !pred.glm.knn.test$`1` %in% c(0,1)
epsi <- min(pred.glm.knn.test$`1`[filter],1-pred.glm.knn.test$`1`[filter])
filt0 <- pred.glm.knn.test$`1`==0
filt1 <- pred.glm.knn.test$`1`==1
pred.glm.knn.test$`1`[filt0] <- epsi
pred.glm.knn.test$`1`[filt1] <- 1-epsi
mean(as.numeric(as.character(test$spam.01))*log(pred.glm.knn.test$`1`) +
(1-as.numeric(as.character(test$spam.01)))*log(1-pred.glm.knn.test$`1`))
x <- as.matrix(test[,!names(test) %in% c("spam.01")])
pred.glm.lasso.test <- predict(glm.lasso, newx = x, type="response")
filter <- !pred.glm.lasso.test %in% c(0,1)
epsi <- min(pred.glm.lasso.test[filter,],1-pred.glm.lasso.test[filter,])
filt0 <- pred.glm.lasso.test==0
filt1 <- pred.glm.lasso.test==1
pred.glm.lasso.test[filt0,] <- epsi
pred.glm.lasso.test[filt1,] <- 1-1e-10
# 1-epsi still does not work. R stil aprox to 1
mean(as.numeric(as.character(test$spam.01))*log(pred.glm.lasso.test) +
(1-as.numeric(as.character(test$spam.01)))*log(1-pred.glm.lasso.test))
spam <- read.table("spambase.data",sep=",")
spam.names <- c(read.table("spambase.names",sep=":",skip=33,nrows=53,as.is=TRUE)[,1],
"char_freq_#",
read.table("spambase.names",sep=":",skip=87,nrows=3,as.is=TRUE)[,1],
"spam.01")
names(spam) <- spam.names
spam$spam.01 <- as.factor(spam$spam.01)
spam.01 <- spam$spam.01
set.seed(5745)
n<-dim(spam)[1]
p<-dim(spam)[2]-1
spam.1 <- which(spam.01==1)
spam.0 <- which(spam.01==0)
n1 <- length(spam.1)
n0 <- length(spam.0)
spam.1.tr <- sort(sample(spam.1, round(2*n1/3)))
spam.0.tr <- sort(sample(spam.0, round(2*n0/3)))
spam.1.test <- setdiff(spam.1,spam.1.tr)
spam.0.test <- setdiff(spam.0,spam.0.tr)
spam.tr <- union(spam.1.tr,spam.0.tr)
spam.test <- union(spam.1.test,spam.0.test)
n.tr <- length(spam.tr)
n.test <- length(spam.test)
train <- spam[spam.tr,]
test <- spam[spam.test,]
glm.spam.tr <- glm(spam.01~., data=train, family = binomial(link = logit))
y <- train$spam.01
x <- as.matrix(train[,!names(train) %in% c("spam.01")])
glm.spam.lasso <- cv.glmnet(y=y, x=x, family = "binomial", nfolds=10,
standardize=TRUE, intercept=TRUE, alpha = 1)
lambda.opt <- glm.spam.lasso$lambda.min
lambda.opt
par(mar = c(4,3,5.5,1), mgp=c(1.5,0.5,0))
plot(glm.spam.lasso, ylab="Mean Square Error",
cex.axis=0.8, cex.lab=0.9, main="Mean Square Error of Lambda")
abline(v=log(glm.spam.lasso$lambda.min),col=2,lty=2)
glm.lasso <- glmnet(y=y, x=x,lambda = lambda.opt, family = "binomial",
standardize = TRUE, intercept = TRUE, alpha = 1)
k <- seq(from=1, to=50, by=1)
y <- train$spam.01
x <- train[,!names(train) %in% c("spam.01")]
knn.spam <- train(x=x,y=y, method="knn",
trControl = trainControl(method = "cv", number = 10),
metric="Accuracy", tuneGrid = expand.grid(k = k),
preProcess = c("center","scale"))
k.opt <- knn.spam$bestTune
J <- 201
cut.points <- (0:J)/J
ROC.obj.glm <- ROC(status=test$spam.01, marker=pred.glm.spam.test, cut.values=cut.points)
ROC.obj.lasso <- ROC(status=test$spam.01, marker=pred.glm.lasso.test, cut.values=cut.points)
ROC.obj.knn <- ROC(status=test$spam.01, marker=pred.glm.knn.test$`1`, cut.values=cut.points)
plot(ROC.obj.glm$FP, ROC.obj.glm$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curves", col=2)
lines(ROC.obj.lasso$FP, ROC.obj.lasso$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2, col=3)
lines(ROC.obj.knn$FP, ROC.obj.knn$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2, col=4)
legend(x="bottomright",c("Glm", "Lasso", "Knn"), cex = 0.75, lty = 1, col = c(2,3,4))
clip(x1=0,x2=1,y1=0,y2=1)
abline(a=0, b=1,col=2,lty=3)
abline(v=0,col=1,lty=3)
abline(h=1,col=1,lty=3)
J <- 201
cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.knn.test$`1`, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=3,
main="ROC Curve for k-nearest-neighbors,", xlim=c(0,1))
clip(x1=0,x2=1,y1=0,y2=1)
abline(a=0, b=1,col=2,lty=3)
abline(v=0,col=1,lty=3)
abline(v=1,col=1,lty=3)
abline(h=1,col=1,lty=3)
abline(h=0,col=1,lty=3)
J <- 201
cut.points <- (0:J)/J
ROC.obj <- ROC(status=test$spam.01, marker=pred.glm.knn.test$`1`, cut.values=cut.points)
plot(ROC.obj$FP, ROC.obj$TP, ylab="Sensitivity=True Positive Rates",
xlab="1-Specificity = False Positive Rates", type="s", lwd=2,
main="ROC Curve for k-nearest-neighbors,", xlim=c(0,1))
clip(x1=0,x2=1,y1=0,y2=1)
abline(a=0, b=1,col=2,lty=3)
abline(v=0,col=1,lty=3)
abline(v=1,col=1,lty=3)
abline(h=1,col=1,lty=3)
abline(h=0,col=1,lty=3)
sum(pred.glm.lasso.test==0)
sum(pred.glm.lasso.test==1)
x <- as.matrix(test[,!names(test) %in% c("spam.01")])
pred.glm.lasso.test <- predict(glm.lasso, newx = x, type="response")
filter <- !pred.glm.lasso.test %in% c(0,1)
epsi <- min(pred.glm.lasso.test[filter,],1-pred.glm.lasso.test[filter,])
filt0 <- pred.glm.lasso.test==0
filt1 <- pred.glm.lasso.test==1
pred.glm.lasso.test[filt0,] <- epsi
pred.glm.lasso.test[filt1,] <- 1-1e-10
# 1-epsi still does not work. R stil aprox to 1
mean(as.numeric(as.character(test$spam.01))*log(pred.glm.lasso.test) +
(1-as.numeric(as.character(test$spam.01)))*log(1-pred.glm.lasso.test))
x <- as.matrix(test[,!names(test) %in% c("spam.01")])
pred.glm.lasso.test <- predict(glm.lasso, newx = x, type="response")
#filter <- !pred.glm.lasso.test %in% c(0,1)
#epsi <- min(pred.glm.lasso.test[filter,],1-pred.glm.lasso.test[filter,])
#filt0 <- pred.glm.lasso.test==0
#filt1 <- pred.glm.lasso.test==1
#pred.glm.lasso.test[filt0,] <- epsi
#pred.glm.lasso.test[filt1,] <- 1-1e-10
# 1-epsi still does not work. R stil aprox to 1
mean(as.numeric(as.character(test$spam.01))*log(pred.glm.lasso.test) +
(1-as.numeric(as.character(test$spam.01)))*log(1-pred.glm.lasso.test))
sum(pred.glm.knn.test$`1`==0)
sum(pred.glm.knn.test$`1`==1)
x <- test[,!names(test) %in% c("spam.01")]
pred.glm.knn.test <- predict(knn, newdata = x, type="prob")
#filter <- !pred.glm.knn.test$`1` %in% c(0,1)
#epsi <- min(pred.glm.knn.test$`1`[filter],1-pred.glm.knn.test$`1`[filter])
#filt0 <- pred.glm.knn.test$`1`==0
#filt1 <- pred.glm.knn.test$`1`==1
#pred.glm.knn.test$`1`[filt0] <- epsi
#pred.glm.knn.test$`1`[filt1] <- 1-epsi
mean(as.numeric(as.character(test$spam.01))*log(pred.glm.knn.test$`1`) +
(1-as.numeric(as.character(test$spam.01)))*log(1-pred.glm.knn.test$`1`))
sum(pred.glm.knn.test$`1`==0)
sum(pred.glm.knn.test$`1`==1)
x <- as.matrix(test[,!names(test) %in% c("spam.01")])
pred.glm.lasso.test <- predict(glm.lasso, newx = x, type="response")
#filter <- !pred.glm.lasso.test %in% c(0,1)
#epsi <- min(pred.glm.lasso.test[filter,],1-pred.glm.lasso.test[filter,])
#filt0 <- pred.glm.lasso.test==0
#filt1 <- pred.glm.lasso.test==1
#pred.glm.lasso.test[filt0,] <- epsi
#pred.glm.lasso.test[filt1,] <- 1-1e-10
# 1-epsi still does not work. R stil aprox to 1
mean(as.numeric(as.character(test$spam.01))*log(pred.glm.lasso.test) +
(1-as.numeric(as.character(test$spam.01)))*log(1-pred.glm.lasso.test))
