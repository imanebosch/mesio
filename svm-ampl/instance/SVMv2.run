reset;

model SVM.mod;
data diffheight2.dat;
option solver cplex;

param epsi := 1e-5; #numeric 0
param dw {N};
param sva;
param yd;

problem Primal: w, s, y, P, res_1;
problem Dual: lambda, D, res_2, res_3;

for {h in {20..20 by 1}} {

let v := h;
let n := 2;
let m := 200; 

printf "\nSVM PRIMAL PROBLEM v=%2i\n" , h;
printf "-----------------------------------------------------------------------|\n\n";

		solve Primal;
		
		printf "\nWEIGHTS:\n\n";
		display w; #weights
		
		printf "\nINDEPENDENT TERMS:\n\n";
		display y , y+1, y-1; #distances


		#Print results of iteration v=l
		printf "%3i %12.3f",
				h,
				y > Primal_res_2.txt; 				
		
		printf {p in N}: "%12.3f", w[p] > Primal_res_2.txt;
		printf "\n" > Primal_res_2.txt;
		###################################

printf "\nSVM DUAL PROBLEM v=%2i\n" , h;
printf "-----------------------------------------------------------------------|\n\n";

		#kernel identity
		let {i in M, j in M} K[i,j] := sum {l in N} x[i,l]*x[j,l]; 
		solve Dual;
		
		printf "\nWEIGHTS:\n\n";
		let {j in N} dw[j] := sum {i in M} lambda[i]*x[i,k]*x[i,j];
		display dw;
		
		printf "\nINDEPENDENT TERMS CALCULATION v=%2i\n" , h;
		printf "--------------------------------------------------|\n\n";
		#Retriving intercept
		printf "\nSUPORT VECTORS:\n\n";
		display {i in M: s[i]<=epsi and lambda[i]>epsi} i;
		let sva := min {i in M: s[i]<=epsi and lambda[i]>epsi} i;
		
		printf "\nINDEPENDENT TERM WITH OBS X=%2i:\n\n", sva;
		let yd:= (sum {j in N} dw[j]*x[sva,j]) - (1/x[sva,k]);
		display yd, yd+1, yd-1;
		
		#Print results of iteration v=l
		printf "%3i %12.3f",
				h,
				yd > Dual_res_2.txt; 				
		
		printf {p in N}: "%12.3f", dw[p] > Dual_res_2.txt;
		printf "\n" > Dual_res_2.txt;
		###################################

}
